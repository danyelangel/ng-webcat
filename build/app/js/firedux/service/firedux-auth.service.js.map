{"version":3,"sources":["firedux/service/firedux-auth.service.es6"],"names":[],"mappings":"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","file":"firedux/service/firedux-auth.service.js","sourcesContent":["(function () {\n  'use strict';\n  class Service {\n    init(firebase) {\n      this.$auth = firebase.auth;\n      this.$database = firebase.database;\n      this.$auth()\n          .onAuthStateChanged(authData => {\n            this.auth = authData;\n          });\n      this.checkLogin();\n    }\n    checkLogin() {\n      this.$auth()\n        .getRedirectResult()\n        .catch(error => {\n          console.log(error);\n        });\n    }\n    waitForAuth(success, error) {\n      return this.$auth()\n          .onAuthStateChanged(success, error);\n    }\n    getProvider(provider, credentials) {\n      let returnable;\n      switch (provider) {\n        case 'facebook':\n          returnable = new this.$auth.FacebookAuthProvider();\n          break;\n        case 'twitter':\n          returnable = new this.$auth.TwitterAuthProvider();\n          break;\n        case 'google':\n          returnable = new this.$auth.GoogleAuthProvider();\n          break;\n        case 'email':\n          returnable = new this.$auth.EmailAuthProvider(credentials);\n          break;\n        default:\n          break;\n      }\n      return returnable;\n    }\n    link(provider) {\n      return this.auth.link(provider);\n    }\n    linkWithRedirect(provider) {\n      return this.auth.linkWithRedirect(provider);\n    }\n    signInAnonymously() {\n      return this.$auth()\n        .signInAnonymously();\n    }\n    signInWithEmailAndPassword(credentials = {}) {\n      return this.$auth()\n        .signInWithEmailAndPassword(\n          credentials.email,\n          credentials.password\n        );\n    }\n    signInWithPopup(provider) {\n      return this.$auth()\n        .signInWithPopup(\n          provider\n        ).then(() => this.updateProfilePicture());\n    }\n    signInWithRedirect(provider) {\n      return this.$auth()\n        .signInWithRedirect(\n          provider\n        ).then(() => this.updateProfilePicture());\n    }\n    register(credentials) {\n      return this.$auth()\n        .createUserWithEmailAndPassword(credentials.email, credentials.password);\n    }\n    updatePassword(oldPassword, newPassword) {\n      let email = this.auth.email;\n      return this.auth\n        .reauthenticate(this.$auth.EmailAuthProvider.credential(\n          email,\n          oldPassword\n        )).then(() => {\n          return this.auth.updatePassword(newPassword);\n        });\n    }\n    updateProfile(profile) {\n      let newProfile = {};\n      if (angular.isString(profile.displayName)) {\n        newProfile.displayName = profile.displayName;\n      }\n      if (angular.isString(profile.photoURL)) {\n        newProfile.photoURL = profile.photoURL;\n      }\n      return this.auth\n        .updateProfile(newProfile);\n    }\n    updateProfilePicture() {\n      return this.updateProfile({\n        photoURL: (((this.auth || {}).providerData || [])[0] || {}).photoURL || null\n      });\n    }\n    logout() {\n      this.$database().goOffline();\n      return this.$auth()\n        .signOut()\n        .then(() => {\n          this.$database().goOnline();\n        });\n    }\n  }\n  angular\n    .module('firedux.auth', [])\n    .service('$fireduxAuth', Service);\n}());\n"],"sourceRoot":"/source/"}