{"version":3,"sources":["firedux/service/firedux-auth.service.es6"],"names":[],"mappings":";;;;;;AAAA,AAAC,CAAA,YAAY;AACX,cAAY,CAAC;;MACP,OAAO;AACA,aADP,OAAO,CACC,OAAO,EAAE;;;4BADjB,OAAO;;AAET,UAAI,CAAC,KAAK,GAAG,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC;AACnC,UAAI,CAAC,WAAW,EAAE,CACf,IAAI,CAAC,UAAA,QAAQ,EAAI;AAChB,cAAK,IAAI,GAAG,QAAQ,CAAC;OACtB,CAAC,CAAC;KACN;;iBAPG,OAAO;;aAQA,uBAAG;;;AACZ,eAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM,EAAK;AACtC,iBAAK,KAAK,EAAE,CACT,kBAAkB,CAAC,UAAA,QAAQ,EAAI;AAC9B,gBAAI,QAAQ,EAAE;AACZ,qBAAO,CAAC,QAAQ,CAAC,CAAC;aACnB,MAAM;AACL,oBAAM,EAAE,CAAC;aACV;WACF,CAAC,CAAC;SACN,CAAC,CAAC;OACJ;;;aACU,qBAAC,QAAQ,EAAE;AACpB,YAAI,UAAU,YAAA,CAAC;AACf,gBAAQ,QAAQ;AACd,eAAK,UAAU;AACb,sBAAU,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,oBAAoB,EAAE,CAAC;AACnD,kBAAM;AAAA,AACR,eAAK,SAAS;AACZ,sBAAU,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,mBAAmB,EAAE,CAAC;AAClD,kBAAM;AAAA,AACR,eAAK,QAAQ;AACX,sBAAU,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,kBAAkB,EAAE,CAAC;AACjD,kBAAM;AAAA,AACR;AACE,kBAAM;AAAA,SACT;AACD,eAAO,UAAU,CAAC;OACnB;;;aACgB,6BAAG;AAClB,eAAO,IAAI,CAAC,KAAK,EAAE,CAChB,iBAAiB,EAAE,CAAC;OACxB;;;aACyB,sCAAmB;YAAlB,WAAW,yDAAG,EAAE;;AACzC,eAAO,IAAI,CAAC,KAAK,EAAE,CAChB,0BAA0B,CACzB,WAAW,CAAC,KAAK,EACjB,WAAW,CAAC,QAAQ,CACrB,CAAC;OACL;;;aACc,yBAAC,QAAQ,EAAE;AACxB,eAAO,IAAI,CAAC,KAAK,EAAE,CAChB,eAAe,CACd,QAAQ,CACT,CAAC;OACL;;;WArDG,OAAO;;;AAuDb,SAAO,CACJ,MAAM,CAAC,qBAAqB,EAAE,EAAE,CAAC,CACjC,OAAO,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC;CACrC,CAAA,EAAE,CAAE","file":"firedux/service/firedux-auth.service.js","sourcesContent":["(function () {\n  'use strict';\n  class Service {\n    constructor($window) {\n      this.$auth = $window.firebase.auth;\n      this.waitForAuth()\n        .then(authData => {\n          this.auth = authData;\n        });\n    }\n    waitForAuth() {\n      return new Promise((resolve, reject) => {\n        this.$auth()\n          .onAuthStateChanged(authData => {\n            if (authData) {\n              resolve(authData);\n            } else {\n              reject();\n            }\n          });\n      });\n    }\n    getProvider(provider) {\n      let returnable;\n      switch (provider) {\n        case 'facebook':\n          returnable = new this.$auth.FacebookAuthProvider();\n          break;\n        case 'twitter':\n          returnable = new this.$auth.TwitterAuthProvider();\n          break;\n        case 'google':\n          returnable = new this.$auth.GoogleAuthProvider();\n          break;\n        default:\n          break;\n      }\n      return returnable;\n    }\n    signInAnonymously() {\n      return this.$auth()\n        .signInAnonymously();\n    }\n    signInWithEmailAndPassword(credentials = {}) {\n      return this.$auth()\n        .signInWithEmailAndPassword(\n          credentials.email,\n          credentials.password\n        );\n    }\n    signInWithPopup(provider) {\n      return this.$auth()\n        .signInWithPopup(\n          provider\n        );\n    }\n  }\n  angular\n    .module('webcat.$fireduxAuth', [])\n    .service('$fireduxAuth', Service);\n}());\n"],"sourceRoot":"/source/"}