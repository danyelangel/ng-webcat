{"version":3,"sources":["firedux/components/set/set.comp.es6"],"names":[],"mappings":";;;;;;AAAA,AAAC,CAAA,YAAY;AACX,cAAY,CAAC;;MACP,UAAU;AACH,aADP,UAAU,CACF,QAAQ,EAAE;4BADlB,UAAU;;AAEZ,UAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;KAC1B;;iBAHG,UAAU;;aAIJ,oBAAC,OAAO,EAAE;AAClB,YACE,OAAO,CAAC,SAAS,IACjB,OAAO,CAAC,SAAS,IACjB,OAAO,CAAC,aAAa,EACrB;AACA,cAAI,CAAC,OAAO,CACV,IAAI,CAAC,SAAS,EACd,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,EAC3B,IAAI,CAAC,aAAa,CACnB,CAAC;SACH;OACF;;;aACM,iBAAC,IAAI,EAAE,GAAG,EAAE,QAAQ,EAAE;;;AAC3B,YAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;AACrB,YAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,GAAG,SAAS,CAAC;AACtC,WAAG,CAAC,GAAG,CAAC,IAAI,CAAC,CACV,IAAI,CAAC,YAAM;AACV,gBAAK,IAAI,EAAE,CAAC;AACZ,gBAAK,QAAQ,GAAG,KAAK,CAAC;AACtB,gBAAK,MAAM,GAAG,IAAI,CAAC;AACnB,gBAAK,QAAQ,CAAC,MAAM,EAAE,CAAC;SACxB,CAAC,SACI,CAAC,UAAA,GAAG,EAAI;AACZ,wBAAU,CAAC;AACT,kBAAM,EAAE,GAAG;WACZ,CAAC,CAAC;AACH,gBAAK,QAAQ,GAAG,KAAK,CAAC;AACtB,gBAAK,MAAM,GAAG,IAAI,CAAC;AACnB,gBAAK,QAAQ,CAAC,MAAM,EAAE,CAAC;SACxB,CAAC,CAAC;AACL,YAAI,QAAQ,EAAE;AACZ,cAAI,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;AAC1B,aAAG,CAAC,YAAY,EAAE,CAAC,MAAM,EAAE,CAAC;SAC7B;OACF;;;aACK,gBAAC,IAAI,EAAE;AACX,YAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;AAC3B,cAAI,SAAM,CAAC;AACT,kBAAM,EAAE;AACN,kBAAI,EAAE,sBAAsB;aAC7B;WACF,CAAC,CAAC;SACJ,MAAM;AACL,iBAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;SAChC;OACF;;;aACc,yBAAC,GAAG,EAAE;AACnB,YAAI,CAAC,UAAU,GAAG,GAAG,CAAC;OACvB;;;aACS,sBAAG;AACX,YAAI,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE;AAC7C,cAAI,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC;SAC1B;OACF;;;WA1DG,UAAU;;;AA4DhB,SAAO,CACJ,MAAM,CAAC,eAAe,EAAE,EAAE,CAAC,CAC3B,SAAS,CAAC,OAAO,EAAE;AAClB,cAAU,EAAE,UAAU;AACtB,eAAW,EAAE,iCAAiC;AAC9C,cAAU,EAAE;AACV,YAAM,EAAE,SAAS;AACjB,UAAI,EAAE,OAAO;AACb,eAAO,QAAQ;KAChB;AACD,YAAQ,EAAE;AACR,eAAS,EAAE,GAAG;AACd,eAAS,EAAE,GAAG;AACd,mBAAa,EAAE,GAAG;AAClB,UAAI,EAAE,GAAG;AACT,eAAO,GAAG;KACX;GACF,CAAC,CAAC;CACN,CAAA,EAAE,CAAE","file":"firedux/components/set/set.comp.js","sourcesContent":["(function () {\n  'use strict';\n  class Controller {\n    constructor($firedux) {\n      this.$firedux = $firedux;\n    }\n    $onChanges(changes) {\n      if (\n        changes.fdSetPath ||\n        changes.fdSetData ||\n        changes.fdSetPresence\n      ) {\n        this.setData(\n          this.fdSetData,\n          this.getRef(this.fdSetPath),\n          this.fdSetPresence\n        );\n      }\n    }\n    setData(data, ref, presence) {\n      this.$loading = true;\n      this.$ready = this.$error = undefined;\n      ref.set(data)\n        .then(() => {\n          this.then();\n          this.$loading = false;\n          this.$ready = true;\n          this.$firedux.$apply();\n        })\n        .catch(err => {\n          this.catch({\n            $error: err\n          });\n          this.$loading = false;\n          this.$error = true;\n          this.$firedux.$apply();\n        });\n      if (presence) {\n        this.removeOnDestroy(ref);\n        ref.onDisconnect().remove();\n      }\n    }\n    getRef(path) {\n      if (!angular.isString(path)) {\n        this.catch({\n          $error: {\n            type: 'Path is not a string'\n          }\n        });\n      } else {\n        return this.$firedux.ref(path);\n      }\n    }\n    removeOnDestroy(ref) {\n      this.destroyRef = ref;\n    }\n    $onDestroy() {\n      if (this.destroyRef && this.destroyRef.remove) {\n        this.destroyRef.remove();\n      }\n    }\n  }\n  angular\n    .module('firedux.fdSet', [])\n    .component('fdSet', {\n      controller: Controller,\n      templateUrl: 'firedux/components/set/set.html',\n      transclude: {\n        before: '?before',\n        then: '?then',\n        catch: '?catch'\n      },\n      bindings: {\n        fdSetPath: '@',\n        fdSetData: '<',\n        fdSetPresence: '<',\n        then: '&',\n        catch: '&'\n      }\n    });\n}());\n"],"sourceRoot":"/source/"}